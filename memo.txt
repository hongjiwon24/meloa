내가 지금부터 만들고 싶은 프로젝트를 하나 말해줄게. 
모바일 전용(데스크톱 버전 없음)
프론트엔드-react
서버-mongodb
구현하고 싶은 흐름을 말해볼게.
가장 처음에 노출되는 화면(홈페이지)에서 시작
관리자모드 클릭
관리자 인증비밀번호 입력
비밀번호 확인되면, 관리자 전용 홈페이지로 이동
음원업로드 클릭
관리자가 음원업로드 완료 후, 음원업로드 완료 버튼 클릭
그 후부터는 사용자모드에서,
관리자가 업로드한 음원이 사용자(일반인)에게 노출되어 있음
사용자는 그 음원을 다운로드 받을 수 있음

지금부터 이걸 만들어 나갈거야.
맨 처음부터 하나하나 단계적으로 일관성있게 해 나가고 싶어.
=========================================

(사용자모드)홈페이지-> 헤더-> (오른쪽 상단) 마이페이지 버튼 -> 로그인이 안 되어 있는 사용자는 로그인 페이지로 이동 -> 회원가입이 안 되어 있는 사용자는 로그인 페이지 하단에 있는 회원가입 클릭 -> 회원가입 진행 -> 회원가입 완료 버튼 클릭 -> 로그인 창 이동 -> 로그인 완료하기 -> 마이페이지 이동 -> 마이페이지 구성요소(사용자의 아이디 노출, 구독중인 이용권 노출, 구매한 콘텐츠 목록 노출)

TrackDetailPage(UserTrackDetailPage.jsx)에 있는 바로구매 버튼 클릭 -> 로그인 되어 있지 않은 사용자는 로그인 페이지로 이동, 로그인 완료하면, 구매페이지로 이동
-> 로그인이 되어 있는 사용자는 바로 구매페이지로 이동
->결제 진행을 위한 입력값 모두 입력 후, 최종적으로 결제하기 버튼 클릭시, 결제완료되었다는 알림창으로 사용자에게 알림
(현재 구현으로는 모두 결제완료 되는 것으로 구현할 예정)
-> 구매 완료된 이용권 또는 음원은 마이페이지 구성요소에 노출되어서 사용자가 볼 수 있도록 한다.
=========================================
관리자 비밀번호 설정
----------------------------
/server/.env > ADMIN_PASSWORD=1234
=========================================

1. ✅ 백엔드 구축 (Express + MongoDB + Multer)

    🔐 관리자 인증 API

        /api/admin/login : 비밀번호 검증 → 성공 시 로그인 처리

    ⬆️ 음원 업로드 API

        /api/tracks/upload

        Multer로 이미지 + 오디오 동시 업로드

        파일은 /uploads/images/, /uploads/audio/ 폴더에 저장

        MongoDB에 metadata 저장 (title, artist, filename, coverImage, lyrics, price)

    📥 음원 목록 조회 API

        /api/tracks: 업로드된 음원 전체 목록 최신순 조회

    🗑️ 음원 삭제 API

        /api/tracks/:id (DELETE)

        MongoDB에서 해당 음원 삭제 + 서버에서 파일 삭제

    🔎 음원 상세 조회 API

        /api/tracks/:id: 단일 음원 상세 데이터 반환

    ❤️ 찜하기 API

        /api/tracks/:id/like: 해당 음원의 likes 필드 +1 증가

2. ✅ 프론트엔드 구현 (React + Vite)
🛠 관리자 모드

    /admin-login: 비밀번호 입력 → 인증 처리

    /admin: 관리자 메인페이지 (업로드 / 목록 이동 버튼)

    /admin/upload: 음원 업로드 폼 (파일 업로드 + 폼 제출)

    /admin/files: 업로드된 음원 목록 표시 및 삭제 기능

🎧 사용자 모드

    /user (UserLatestPage.jsx)

        최신 업로드된 음원 리스트 출력

        썸네일 이미지 + 제목 + 아티스트 노출

        각 항목 클릭 시 상세 페이지로 이동

    /tracks/:id (UserTrackDetailPage.jsx)

        선택한 음원의 상세 정보 출력

        커버 이미지, 오디오 플레이어, 가사, 가격, 등록일

        💖 찜하기 버튼 → 누르면 좋아요 수 증가

    /tracks/popular (UserPopularPage.jsx)

        likes 수 기준으로 내림차순 정렬된 인기차트 표시

        1위부터 순서대로 리스트 출력


=========================================



업로드 음원 샘플 다운로드 사이트:
https://www.shutterstock.com/ko/blog/free-music-samples/?dd_referrer=https%3A%2F%2Fwww.google.com%2F
=========================================

// /server/index.js
// 특수문자 제거 (공백, # 등)
const safeBase = base.replace(/[^a-zA-Z0-9-_]/g, '_');


=========================================

나중에 프론트에서 src 경로로 쓸 땐:
<img src={`http://localhost:5000/uploads/images/${coverImage}`} />
<audio src={`http://localhost:5000/uploads/audio/${filename}`} controls />

=========================================

추가 팁: 잘못된 파일 업로드 방지를 위한 코드
const upload = multer({ 
  storage: storage,
  fileFilter: function (req, file, cb) {
    if (file.mimetype.startsWith('image/') || file.mimetype.startsWith('audio/')) {
      cb(null, true);
    } else {
      cb(new Error('이미지 또는 음원 파일만 업로드할 수 있습니다.'));
    }
  }
});

***현재는 없음

=========================================

          <AlbumImage src={`http://localhost:5000/uploads/images/${track.coverImage}`} alt={track.title} />

이미지 출력 성공!

다음단계로 넘어가자.

회원가입/로그인 기능으로 넘어갈 수 있을까?

이 기능 시작하기 전에 사전정보로 구현하고 싶은 큰 틀을 먼저 말할게.

(사용자모드)홈페이지-> 헤더-> (오른쪽 상단) 마이페이지 버튼 -> 로그인이 안 되어 있는 사용자는 로그인 페이지로 이동 -> 회원가입이 안 되어 있는 사용자는 로그인 페이지 하단에 있는 회원가입 클릭 -> 회원가입 진행 -> 회원가입 완료 버튼 클릭 -> 로그인 창 이동 -> 로그인 완료하기 -> 마이페이지 이동 -> 마이페이지 구성요소(사용자의 아이디 노출, 구독중인 이용권 노출, 구매한 콘텐츠 목록 노출)

TrackDetailPage(UserTrackDetailPage.jsx)에 있는 바로구매 버튼 클릭 -> 로그인 되어 있지 않은 사용자는 로그인 페이지로 이동, 로그인 완료하면, 구매페이지로 이동
-> 로그인이 되어 있는 사용자는 바로 구매페이지로 이동
->결제 진행을 위한 입력값 모두 입력 후, 최종적으로 결제하기 버튼 클릭시, 결제완료되었다는 알림창으로 사용자에게 알림
(현재 구현으로는 모두 결제완료 되는 것으로 구현할 예정)
-> 구매 완료된 이용권 또는 음원은 마이페이지 구성요소에 노출되어서 사용자가 볼 수 있도록 한다.

=========================================

이용권 종류 중 프리미엄 정기결제와 프리미엄 30일의 차이는?

